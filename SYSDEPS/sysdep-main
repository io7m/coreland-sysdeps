#!/bin/sh

#
# this file is only ever called by modules, so all paths must be
# relative to the module ("../../").
#

# path from module to sysdeps dir (MUST end with trailing slash)
SYSDEP_DIR_RELATIVE="../../"
export SYSDEP_DIR_RELATIVE

# outdir is relative to each entry in modules directory, can be
SYSDEP_OUTDIR="${SYSDEP_DIR_RELATIVE}/../"

# override with conf-outdir if it exists
if [ -f "${SYSDEP_DIR_RELATIVE}/conf-outdir" ]
then
  DIR=`head -n 1 "${SYSDEP_DIR_RELATIVE}/conf-outdir"`
  if [ $? -eq 0 ]
  then
    SYSDEP_OUTDIR="${SYSDEP_DIR_RELATIVE}/${DIR}"
  fi
fi
export SYSDEP_OUTDIR

SYSDEP_TRY_CONFIG_BIN=${SYSDEP_DIR_RELATIVE}/sd-configbin
SYSDEP_TRY_PKG_CONFIG=${SYSDEP_DIR_RELATIVE}/sd-configpkg
SYSDEP_TRY_MANUAL=${SYSDEP_DIR_RELATIVE}/sd-configman
SYSDEP_FATAL=${SYSDEP_DIR_RELATIVE}/sd-fatal
SYSDEP_ERROR=${SYSDEP_DIR_RELATIVE}/sd-error
SYSDEP_INFO=${SYSDEP_DIR_RELATIVE}/sd-info
SYSDEP_FILE=${SYSDEP_DIR_RELATIVE}/sd-file
SYSDEP_LINE=${SYSDEP_DIR_RELATIVE}/sd-line

PWD=`pwd`
SYSDEP_MODULE="`basename $PWD`"

export SYSDEP_MODULE
export SYSDEP_TRY_CONFIG_BIN
export SYSDEP_TRY_PKG_CONFIG
export SYSDEP_TRY_MANUAL
export SYSDEP_ERROR
export SYSDEP_INFO
export SYSDEP_FATAL
export SYSDEP_FILE
export SYSDEP_LINE

files_move()
{
  for file in ${CREATES}
  do
    if [ "${file}" = "sysdeps.out" ]
    then
      cat "$file" >> "${SYSDEP_OUTDIR}/$file"
      rm -f "${file}"
    else
      cp "$file" "${SYSDEP_OUTDIR}/$file"
      rm -f "${file}"
    fi
  done
}

files_clean()
{
  if [ -f creates ]
  then
    for file in `cat creates`
    do
      rm -f "${file}" "${SYSDEP_OUTDIR}/${file}"
    done
  fi
}

flatten_defines()
{
  if [ ! -z "$1" ]
  then
    for tag in $1
    do
      d="-D${tag} ${d}"
    done
    echo "$d"
  fi
}


#
# List of created files.
#

CREATES="`cat creates` sysdeps.out"
if [ -z "${SYSDEP_CLEAN}" ];
then
  . ${SYSDEP_DIR_RELATIVE}/sysdep-subs;

  #
  # Ensure a clean environment.
  #

  rm -f ${CREATES}
  touch ${CREATES}

  #
  # Execute custom script if present
  #

  if [ -x custom ]
  then
    ./custom ${CREATES}
    files_move
    exit 0
  fi

  defines="`cat defines 2>/dev/null`"
  ofile="`${SYSDEP_LINE} 1 < creates`"

  # Read extra flags if present
  if [ -f flags ]; then extra_flags="`${SYSDEP_LINE} 1 < flags`"; fi

  # Read OS specific flags if there is a matching OS
  os_lower="`echo ${SYSDEP_OS} | sed -e 's/SYSDEP_OS_//g' | tr [A-Z] [a-z]`"
  if [ -f "os_ext/$os_lower/flags" ]
  then
    extra_flags="${extra_flags} `${SYSDEP_LINE} 1 < os_ext/$os_lower/flags`"
  fi

  #
  # Try config binary if requested
  #

  if [ -f config_bin ]
  then
    config_bin="`${SYSDEP_LINE} 1 < config_bin`"
    config_bin_args="`${SYSDEP_LINE} 1 < config_bin_args`"
    flags=`${SYSDEP_TRY_CONFIG_BIN} "${config_bin}" "${config_bin_args}" 2>&-`
    if [ ! -z "${flags}" ]
    then 
      str="${flags} `flatten_defines "${defines}"` ${extra_flags}"
      echo "${str}" >> "${ofile}"
      echo "${SYSDEP_MODULE}: ${str}" >> "sysdeps.out"
      files_move
      exit 0
    else
      ${SYSDEP_ERROR} "config binary failed"
    fi
  fi

  #
  # Try pkg-config if requested
  #

  if [ -f pkg ]
  then
    pkg_config_args="`${SYSDEP_LINE} 1 < pkg_config_args`"
    pkg="`${SYSDEP_LINE} 1 < pkg`"
    flags=`${SYSDEP_TRY_PKG_CONFIG} "${pkg}" "${pkg_config_args}" 2>&-`
    if [ ! -z "${flags}" ]
    then
      str="${flags} `flatten_defines "${defines}"` ${extra_flags}"
      echo "${str}" >> "${ofile}"
      echo "${SYSDEP_MODULE}: ${str}" >> "sysdeps.out"
      files_move
      exit 0
    else
      ${SYSDEP_ERROR} "pkg-config failed"
    fi
  fi

  #
  # Fall back to manual search.
  #

  if [ -f path_add ]
  then
    path_add="`cat path_add`"
    for add in ${path_add}
    do
      SYSDEP_STDINC="${add}/include ${SYSDEP_STDINC}"
    done
    for add in ${path_add}
    do
      SYSDEP_STDLIB="${add}/lib ${SYSDEP_STDLIB}"
    done
  fi

  if [ -f path_ext ]
  then
    path_ext="`cat path_ext`"
    for dir in ${SYSDEP_STDINC}
    do
      for ext in ${path_ext}
      do
        SYSDEP_STDINC="${dir}/${ext} ${SYSDEP_STDINC}"
      done
    done
    for dir in ${SYSDEP_STDLIB}
    do
      for ext in ${path_ext}
      do
        SYSDEP_STDLIB="${dir}/${ext} ${SYSDEP_STDLIB}"
      done
    done
  fi

  if [ -f header ]
  then
    file="`${SYSDEP_LINE} 1 < header`"
    flags=`${SYSDEP_TRY_MANUAL} "${file}" "${SYSDEP_STDINC}" "-I" 2>&-`
    if [ ! -z "${flags}" ]
    then
      str="${flags} `flatten_defines "${defines}"` ${extra_flags}"
      echo "${str}" >> "${ofile}"
      echo "${SYSDEP_MODULE}: ${str}" >> "sysdeps.out"
      files_move
      exit 0
    fi
  fi

  if [ -f dynlib ]
  then
    lib="`${SYSDEP_LINE} 1 < dynlib`"
    file="lib${lib}.${SYSDEP_LIBSUFFIX}"
    flags=`${SYSDEP_TRY_MANUAL} "${file}" "${SYSDEP_STDLIB}" "-L" 2>&-`
    if [ ! -z "${flags}" ]
    then
      str="${flags} -l${lib} ${extra_flags}"
      echo "${str}" >> "${ofile}"
      echo "${SYSDEP_MODULE}: ${str}" >> "sysdeps.out"
      files_move
      exit 0
    fi
  fi

  ${SYSDEP_ERROR} "manual search failed"
else
  rm -f ${SYSDEP_DIR_RELATIVE}/sd-cpuidx86 \
        ${SYSDEP_DIR_RELATIVE}/sd-cpuidx86.o
  rm -f ${SYSDEP_DIR_RELATIVE}/sd-arch \
        ${SYSDEP_DIR_RELATIVE}/sd-arch.o
  rm -f ${SYSDEP_DIR_RELATIVE}/sd-cctype \
        ${SYSDEP_DIR_RELATIVE}/sd-cctype.o
  rm -f ${SYSDEP_DIR_RELATIVE}/sd-ccversion \
        ${SYSDEP_DIR_RELATIVE}/sd-ccversion.o
  rm -f ${SYSDEP_DIR_RELATIVE}/sd-os \
        ${SYSDEP_DIR_RELATIVE}/sd-os.o
  rm -f ${SYSDEP_OUTDIR}/sysdeps.out

  files_clean
fi

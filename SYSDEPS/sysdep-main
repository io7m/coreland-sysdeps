#!/bin/sh

#
# this file is only ever called by modules, so all paths must be
# relative to the module ("../../")
#

MODULE_RELATIVE="../../"

error()
{
  echo "$1" 1>&2
}

# find system type
SYSDEP_OS="`${MODULE_RELATIVE}/sd-os`"
if [ $? -ne 0 ]; then SYSDEP_OS="SYSDEP_OS_UNKNOWN"; fi
export SYSDEP_OS

# find system architecture
SYSDEP_ARCH="`${MODULE_RELATIVE}/sd-arch ${SYSDEP_OS}`"
if [ $? -ne 0 ]; then SYSDEP_OS="SYSDEP_ARCH_UNKNOWN"; fi
export SYSDEP_ARCH

# find cpu features
SYSDEP_CPU_EXT="`${MODULE_RELATIVE}/sd-cpufeat ${SYSDEP_OS}`"
if [ $? -ne 0 ]; then SYSDEP_CPU_EXT=""; fi
export SYSDEP_CPU_EXT

# find number of CPUs
SYSDEP_NCPUS="`${MODULE_RELATIVE}/sd-cpunum ${SYSDEP_OS}`"
if [ $? -ne 0 ]; then SYSDEP_CPU_NUM="0"; fi
export SYSDEP_CPU_NUM

# find CPU model
SYSDEP_CPU_MODEL="`${MODULE_RELATIVE}/sd-cpunum ${SYSDEP_OS}`"
if [ $? -ne 0 ]; then SYSDEP_CPU_MODEL="SYSDEP_CPU_MODEL_UNKNOWN"; fi
export SYSDEP_CPU_MODEL

# find CPU frequency
SYSDEP_CPU_FREQ="`${MODULE_RELATIVE}/sd-cpufreq ${SYSDEP_OS}`"
if [ $? -ne 0 ]; then SYSDEP_CPU_FREQ="0"; fi
export SYSDEP_CPU_FREQ

# find CPU L1 instruction cache size
SYSDEP_CPU_L1_INST_CACHE_SIZE="`${MODULE_RELATIVE}/sd-cpul1icache ${SYSDEP_OS}`"
if [ $? -ne 0 ]; then SYSDEP_CPU_L1_INST_CACHE_SIZE="0"; fi
export SYSDEP_CPU_L1_INST_CACHE_SIZE

# find CPU L1 data cache size
SYSDEP_CPU_L1_DATA_CACHE_SIZE="`${MODULE_RELATIVE}/sd-cpul1dcache ${SYSDEP_OS}`"
if [ $? -ne 0 ]; then SYSDEP_CPU_L1_DATA_CACHE_SIZE="0"; fi
export SYSDEP_CPU_L1_DATA_CACHE_SIZE

# find CPU L2 cache size
SYSDEP_CPU_L2_CACHE_SIZE="`${MODULE_RELATIVE}/sd-cpul2cache ${SYSDEP_OS}`"
if [ $? -ne 0 ]; then SYSDEP_CPU_L2_CACHE_SIZE="0"; fi
export SYSDEP_CPU_L2_CACHE_SIZE

# find CPU L3 cache size
SYSDEP_CPU_L3_CACHE_SIZE="`${MODULE_RELATIVE}/sd-cpul3cache ${SYSDEP_OS}`"
if [ $? -ne 0 ]; then SYSDEP_CPU_L3_CACHE_SIZE="0"; fi
export SYSDEP_CPU_L3_CACHE_SIZE

# find CPU cache line size
SYSDEP_CPU_CACHE_LINE_SIZE="`${MODULE_RELATIVE}/sd-cpuclinesz ${SYSDEP_OS}`"
if [ $? -ne 0 ]; then SYSDEP_CPU_CACHE_LINE_SIZE="0"; fi
export SYSDEP_CPU_CACHE_LINE_SIZE

# standard include path
SYSDEP_STDINC="/usr/include /usr/local/include"
case ${SYSDEP_OS} in
  SYSDEP_OS_DARWIN) SYSDEP_STDINC="/sw/include ${SYSDEP_STDINC}";;
  SYSDEP_OS_SUNOS) SYSDEP_STDINC="/usr/sfw/include ${SYSDEP_STDINC}";;
  *)
esac
export SYSDEP_STDINC

# standard library path
SYSDEP_STDLIB="/usr/lib /usr/local/lib"
case ${SYSDEP_OS} in
  SYSDEP_OS_DARWIN) SYSDEP_STDLIB="/sw/lib ${SYSDEP_STDLIB}";;
  SYSDEP_OS_SUNOS) SYSDEP_STDLIB="/usr/sfw/lib ${SYSDEP_STDLIB}";;
  *)
esac
export SYSDEP_STDLIB

# find system dynamic library suffix
SYSDEP_LIBSUFFIX="so"
case ${SYSDEP_OS} in
  SYSDEP_OS_DARWIN) SYSDEP_LIBSUFFIX="dylib" ;;
  SYSDEP_OS_HPUX) SYSDEP_LIBSUFFIX="sl";;
  *) ;;
esac
export SYSDEP_LIBSUFFIX

# outdir is relative to each entry in modules directory
SYSDEP_OUTDIR="${MODULE_RELATIVE}/../"
export SYSDEP_OUTDIR

# compiler
# sysdeps conf-cc preferred over project conf-cc preferred over 'cc'
SYSDEP_CC="cc"
if [ -f "${MODULE_RELATIVE}/conf-cc" ]
then
  tmp=`head -n 1 "${MODULE_RELATIVE}/conf-cc"`
  if [ ! -z "${tmp}" ]
  then
    SYSDEP_CC="${tmp}"
  fi
fi
if [ -f "../conf-cc" ]
then
  tmp=`head -n 1 "../conf-cc"`
  if [ ! -z "${tmp}" ]
  then
    SYSDEP_CC="${tmp}"
  fi
fi
export SYSDEP_CC

SYSDEP_TRY_CONFIG_BIN=${MODULE_RELATIVE}/sd-configbin
SYSDEP_TRY_PKG_CONFIG=${MODULE_RELATIVE}/sd-configpkg
SYSDEP_TRY_MANUAL=${MODULE_RELATIVE}/sd-configman
SYSDEP_ERROR=${MODULE_RELATIVE}/sd-error

export SYSDEP_TRY_CONFIG_BIN
export SYSDEP_TRY_PKG_CONFIG
export SYSDEP_TRY_MANUAL

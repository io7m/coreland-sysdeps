#!/bin/sh

#
# sysdep-boot
#

#
# This file is only ever called by modules, so all paths must be
# relative to the module ("../../").
#

#
# Essential subprograms.
#

SYSDEP_FATAL()
{
  if [ ! -z "${SYSDEP_MODULE}" ]
  then
    echo "${SYSDEP_MODULE}: fatal: $1" 1>&2
  else
    echo "sysdep-main: fatal: $1" 1>&2
  fi
  exit 1
}

SYSDEP_ERROR()
{
  if [ ! -z "${SYSDEP_MODULE}" ]
  then
    echo "${SYSDEP_MODULE}: error: $1" 1>&2
  else
    echo "sysdep-main: error: $1" 1>&2
  fi
}

SYSDEP_INFO()
{
  if [ ! -z "${SYSDEP_MODULE}" ]
  then
    echo "${SYSDEP_MODULE}: info: $1" 1>&2
  else
    echo "sysdep-main: info: $1" 1>&2
  fi
}

#
# Path from module to SYSDEPS dir (MUST end with trailing slash)
#
SYSDEP_DIR_RELATIVE="../../"
export SYSDEP_DIR_RELATIVE

#
# Assign variables/subprograms for use.
#

SYSDEP_TRY_CONFIG_BIN=${SYSDEP_DIR_RELATIVE}/sd-configbin
SYSDEP_TRY_PKG_CONFIG=${SYSDEP_DIR_RELATIVE}/sd-configpkg
SYSDEP_TRY_MANUAL=${SYSDEP_DIR_RELATIVE}/sd-configman
SYSDEP_FILE=${SYSDEP_DIR_RELATIVE}/sd-file
SYSDEP_LINE=${SYSDEP_DIR_RELATIVE}/sd-line

#
# OUTDIR is relative to each entry in modules directory unless overridden.
#
SYSDEP_OUTDIR="${SYSDEP_DIR_RELATIVE}/../"

#
# Override with contents of conf-outdir, if it exists.
#

if [ -f "${SYSDEP_DIR_RELATIVE}/conf-outdir" ]
then
  DIR=`head -n 1 "${SYSDEP_DIR_RELATIVE}/conf-outdir"`
  if [ $? -eq 0 ]
  then
    SYSDEP_OUTDIR="${SYSDEP_DIR_RELATIVE}/${DIR}"
  else
    SYSDEP_FATAL "conf-outdir exists but could not be read"
  fi
fi
export SYSDEP_OUTDIR

#
# Obtain current working directory.
#

PWD=`pwd` || SYSDEP_FATAL "could not obtain current working directory (problem with 'pwd')"

#
# Obtain name of module based on current directory.
#

SYSDEP_MODULE="`basename $PWD`" || SYSDEP_FATAL "could not translate current working directory (problem with 'basename')"

export SYSDEP_MODULE
export SYSDEP_TRY_CONFIG_BIN
export SYSDEP_TRY_PKG_CONFIG
export SYSDEP_TRY_MANUAL
export SYSDEP_ERROR
export SYSDEP_INFO
export SYSDEP_FATAL
export SYSDEP_FILE
export SYSDEP_LINE

#
# Support subprograms.
#

#
# Move created files out of working directory into output directory.
#

SDM_files_move()
{
  for file in ${SDM_CREATES}
  do
    if [ "${file}" = "sysdeps.out" ]
    then
      cat "$file" >> "${SYSDEP_OUTDIR}/$file"
      rm -f "${file}"
    else
      cp "$file" "${SYSDEP_OUTDIR}/$file"
      rm -f "${file}"
    fi
  done
}

#
# Remove created files from output directory.
#

SDM_files_clean()
{
  for file in ${SDM_CREATES}
  do
    rm -f "${file}" "${SYSDEP_OUTDIR}/${file}"
  done
}

#
# Convert list of macro names into flattened string with each macro
# name prefixed with '-D'.
#
# XXX: Do all compilers accept -D?
#

SDM_flatten_defines()
{
  d=""
  if [ ! -z "$1" ]
  then
    for tag in $1
    do
      d="-D${tag} ${d}"
    done
    echo "$d"
  fi
}

#
# Add given list of directories to standard search paths.
#

SDM_paths_add()
{
  for p in $1; do SYSDEP_STDINC="$p/include $p ${SYSDEP_STDINC}"; done
  for p in $1; do SYSDEP_STDLIB="$p/lib $p ${SYSDEP_STDLIB}"; done
}

#
# Concatentate each element of given list of path components
# to each component of the standard search paths and combine
# the two resulting lists.
#

SDM_paths_extend()
{
  for d in ${SYSDEP_STDINC}
  do
    for e in $1; do SYSDEP_STDINC="$d/$e ${SYSDEP_STDINC}"; done
  done
  for d in ${SYSDEP_STDLIB}
  do
    for e in $1; do SYSDEP_STDLIB="$d/$e ${SYSDEP_STDLIB}"; done
  done
}

#
# Strip leading SYSDEP_OS_ tag from operating system name and
# convert to lowercase.
#

SDM_os_tolower()
{
  echo ${SYSDEP_OS} | sed -e 's/SYSDEP_OS_//g' | tr [A-Z] [a-z]
}

#
# Obtain list of files that the current module creates.
#

SDM_CREATES=`cat creates` || SYSDEP_FATAL "could not read 'creates' file"
SDM_CREATES="${SDM_CREATES} sysdeps.out"

#
# Execute module.
#

if [ -z "${SYSDEP_CLEAN}" ];
then
  . ${SYSDEP_DIR_RELATIVE}/sysdep-subs;

  #
  # Ensure a clean environment.
  #

  rm -f ${SDM_CREATES} || SYSDEP_FATAL "could not clean up created files"
  touch ${SDM_CREATES} || SYSDEP_FATAL "could not create empty files"

  #
  # Execute custom script if present.
  #

  if [ -x "custom" ]
  then
    ./custom ${SDM_CREATES} || SYSDEP_ERROR "custom search reported failure"
    SDM_files_move
    exit 0
  else
    if [ -f "custom" ]
    then
      SYSDEP_FATAL "'custom' exists but is not executable"
    fi
  fi

  #
  # Create output file.
  #

  OUTPUT_FILE="`${SYSDEP_LINE} 1 < creates`" ||
    SYSDEP_FATAL "could not determine output file"
  touch ${OUTPUT_FILE} ||
    SYSDEP_FATAL "could not create '${OUTPUT_FILE}'"

  if [ -f "defines" ]
  then
    DEFINES="`cat defines`" ||
      SYSDEP_FATAL "could not read 'defines'"
  fi

  #
  # Read OS specific definitions.
  #

  OS_LOWER=`SDM_os_tolower` ||
    SYSDEP_FATAL "could not convert OS string to lowercase"

  if [ -f "os_ext/${OS_LOWER}/defines" ]
  then
    DEFINES="`cat "os_ext/${OS_LOWER}/defines"`" ||
      SYSDEP_FATAL "could not read 'os_ext/${OS_LOWER}/defines'"
  fi
  if [ -f flags ]
  then
    EXTRA_FLAGS="`${SYSDEP_LINE} 1 < flags`" ||
      SYSDEP_FATAL "could not read 'flags'"
  fi
  if [ -f "os_ext/${OS_LOWER}/flags" ]
  then
    EXTRA_FLAGS="${EXTRA_FLAGS} `${SYSDEP_LINE} 1 < os_ext/${OS_LOWER}/flags`" ||
      SYSDEP_FATAL "could not read 'os_ext/${OS_LOWER}/flags'"
  fi

  #
  # Try config binary if requested
  #

  if [ -f "config_bin" ]
  then
    CONFIG_BINARY="`${SYSDEP_LINE} 1 < config_bin`" ||
      SYSDEP_FATAL "could not read 'config_bin'"
    CONFIG_BINARY_ARGS="`${SYSDEP_LINE} 1 < config_bin_args`" ||
      SYSDEP_FATAL "could not read 'config_bin_args'"

    FLAGS=`${SYSDEP_TRY_CONFIG_BIN} "${CONFIG_BINARY}" "${CONFIG_BINARY_ARGS}"` ||
      SYSDEP_ERROR "config binary '${CONFIG_BINARY}' failed"

    if [ ! -z "${FLAGS}" ]
    then
      FINAL_DEFINES=`SDM_flatten_defines "${DEFINES}"` ||
        SYSDEP_FATAL "error flattening preprocessor defines"
      FINAL_OUTPUT="${FLAGS} ${FINAL_DEFINES} ${EXTRA_FLAGS}"

      echo "${FINAL_OUTPUT}" >> "${OUTPUT_FILE}" ||
        SYSDEP_FATAL "could not write ${OUTPUT_FILE}"
      echo "${SYSDEP_MODULE}: ${FINAL_OUTPUT}" >> "sysdeps.out" ||
        SYSDEP_FATAL "could not write sysdeps.out"

      SDM_files_move || SYSDEP_FATAL "error moving files"
      exit 0
    fi
  fi

  #
  # Try pkg-config if requested
  #

  if [ -f "pkg" ]
  then
    PKG_CONFIG_ARGS="`${SYSDEP_LINE} 1 < pkg_config_args`" ||
      SYSDEP_FATAL "could not read 'pkg_config_args'"
    PACKAGE="`${SYSDEP_LINE} 1 < pkg`" ||
      SYSDEP_FATAL "could not read 'pkg'"

    FLAGS=`${SYSDEP_TRY_PKG_CONFIG} "${PACKAGE}" "${PKG_CONFIG_ARGS}"` ||
      SYSDEP_ERROR "pkg-config failed for '${PACKAGE}'"

    if [ ! -z "${FLAGS}" ]
    then
      FINAL_DEFINES=`SDM_flatten_defines "${DEFINES}"` ||
        SYSDEP_FATAL "error flattening preprocessor defines"
      FINAL_OUTPUT="${FLAGS} ${FINAL_DEFINES} ${EXTRA_FLAGS}"

      echo "${FINAL_OUTPUT}" >> "${OUTPUT_FILE}" ||
        SYSDEP_FATAL "could not write ${OUTPUT_FILE}"
      echo "${SYSDEP_MODULE}: ${FINAL_OUTPUT}" >> "sysdeps.out" ||
        SYSDEP_FATAL "could not write sysdeps.out"

      SDM_files_move || SYSDEP_FATAL "error moving files"
      exit 0
    fi
  fi

  #
  # Fall back to manual search.
  #

  if [ -f "path_add" ]
  then
    SDM_paths_add "`cat path_add`" ||
      SYSDEP_FATAL "could not read 'path_add'"
  fi
  if [ -f "os_ext/${OS_LOWER}/path_add" ]
  then
    SDM_paths_add "`cat os_ext/${OS_LOWER}/path_add`" ||
      SYSDEP_FATAL "could not read 'os_ext/${OS_LOWER}/path_add'"
  fi
  if [ -f "path_ext" ]
  then
    SDM_paths_extend "`cat path_ext`" ||
      SYSDEP_FATAL "could not read 'path_ext'"
  fi
  if [ -f "os_ext/${OS_LOWER}/path_ext" ]
  then
    SDM_paths_extend "`cat os_ext/${OS_LOWER}/path_ext`" ||
      SYSDEP_FATAL "could not read 'os_ext/${OS_LOWER}/path_ext'"
  fi

  #
  # Header file search.
  #

  if [ -f "header" ]
  then
    HEADER_FILE="`${SYSDEP_LINE} 1 < header`" ||
      SYSDEP_FATAL "could not read 'header'"

    if [ -f "os_ext/${OS_LOWER}/header" ]
    then
      HEADER_FILE="`${SYSDEP_LINE} 1 < os_ext/${OS_LOWER}/header`" ||
        SYSDEP_FATAL "could not read 'os_ext/${OS_LOWER}/header'"
    fi

    FLAGS=`${SYSDEP_TRY_MANUAL} "${HEADER_FILE}" "${SYSDEP_STDINC}" "-I"` ||
      SYSDEP_ERROR "manual search for ${HEADER_FILE} failed"

    if [ ! -z "${FLAGS}" ]
    then
      FINAL_DEFINES=`SDM_flatten_defines "${DEFINES}"` ||
        SYSDEP_FATAL "error flattening preprocessor defines"
      FINAL_OUTPUT="${FLAGS} ${FINAL_DEFINES} ${EXTRA_FLAGS}"

      echo "${FINAL_OUTPUT}" >> "${OUTPUT_FILE}" ||
        SYSDEP_FATAL "could not write ${OUTPUT_FILE}"
      echo "${SYSDEP_MODULE}: ${FINAL_OUTPUT}" >> "sysdeps.out" ||
        SYSDEP_FATAL "could not write sysdeps.out"

      SDM_files_move || SYSDEP_FATAL "error moving files"
      exit 0
    fi
  fi

  #
  # Dynamic library search.
  #

  if [ -f "dynlib" ]
  then
    DYNAMIC_LIB="`${SYSDEP_LINE} 1 < dynlib`" ||
      SYSDEP_FATAL "could not read 'dynlib'"

    if [ -f "os_ext/${OS_LOWER}/dynlib" ]
    then
      DYNAMIC_LIB="`${SYSDEP_LINE} 1 < os_ext/${OS_LOWER}/dynlib`" ||
        SYSDEP_FATAL "could not read 'os_ext/${OS_LOWER}/dynlib'"
    fi

    LIBRARY_FILE="lib${DYNAMIC_LIB}.${SYSDEP_LIBSUFFIX}"

    FLAGS=`${SYSDEP_TRY_MANUAL} "${LIBRARY_FILE}" "${SYSDEP_STDLIB}" "-L"` ||
      SYSDEP_ERROR "manual search for '${LIBRARY_FILE}' failed"

    if [ ! -z "${FLAGS}" ]
    then
      FINAL_OUTPUT="${FLAGS} -l${DYNAMIC_LIB} ${EXTRA_FLAGS}"
      echo "${FINAL_OUTPUT}" >> "${OUTPUT_FILE}" ||
        SYSDEP_FATAL "could not write '${OUTPUT_FILE}'"
      echo "${SYSDEP_MODULE}: ${FINAL_OUTPUT}" >> "sysdeps.out" ||
        SYSDEP_FATAL "could not write 'sysdeps.out'"

      SDM_files_move || SYSDEP_FATAL "error moving files"
      exit 0
    fi
  fi

  #
  # Static library search.
  #

  if [ -f slib ]
  then
    STATIC_LIBRARY="`${SYSDEP_LINE} 1 < slib`" ||
      SYSDEP_FATAL "could not read 'slib'"

    if [ -f "os_ext/${OS_LOWER}/slib" ]
    then
      STATIC_LIBRARY="`${SYSDEP_LINE} 1 < os_ext/${OS_LOWER}/slib`" ||
        SYSDEP_FATAL "could not read 'os_ext/${OS_LOWER}/slib'"
    fi

    STATIC_LIBRARY_FILE="lib${STATIC_LIBRARY}.a"

    FLAGS=`${SYSDEP_TRY_MANUAL} "${STATIC_LIBRARY_FILE}" "${SYSDEP_STDLIB}" ""` ||
      SYSDEP_ERROR "manual search for '${STATIC_LIBRARY_FILE}' failed"

    if [ ! -z "${FLAGS}" ]
    then
      FINAL_OUTPUT=`printf "%s/%s %s" ${FLAGS} "${STATIC_LIBRARY_FILE}" "${EXTRA_FLAGS}"` ||
        SYSDEP_FATAL "could not assemble output"

      echo "${FINAL_OUTPUT}" >> "${OUTPUT_FILE}" ||
        SYSDEP_FATAL "could not write to '${OUTPUT_FILE}'"
      echo "${SYSDEP_MODULE}: ${FINAL_OUTPUT}" >> "sysdeps.out" ||
        SYSDEP_FATAL "could not write to 'sysdeps.out'"

      SDM_files_move || SYSDEP_FATAL "error moving files"
      exit 0
    fi
  fi

  SYSDEP_INFO "all search types failed"
  SDM_files_move || SYSDEP_FATAL "error moving files"
else
  rm -f ${SYSDEP_DIR_RELATIVE}/sd-cpuidx86       \
        ${SYSDEP_DIR_RELATIVE}/sd-cpuidx86.o     \
        ${SYSDEP_DIR_RELATIVE}/sd-arch           \
        ${SYSDEP_DIR_RELATIVE}/sd-arch.o         \
        ${SYSDEP_DIR_RELATIVE}/sd-cctype         \
        ${SYSDEP_DIR_RELATIVE}/sd-cctype.o       \
        ${SYSDEP_DIR_RELATIVE}/sd-ccversion      \
        ${SYSDEP_DIR_RELATIVE}/sd-ccversion.o    \
        ${SYSDEP_DIR_RELATIVE}/sd-adaversion.out \
        ${SYSDEP_DIR_RELATIVE}/sd-os             \
        ${SYSDEP_DIR_RELATIVE}/sd-os.o           \
        ${SYSDEP_OUTDIR}/sysdeps.out ||
    SYSDEP_FATAL "error removing standard files"
  SDM_files_clean ||
    SYSDEP_FATAL "error removing files"
fi
